{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9309992,"sourceType":"datasetVersion","datasetId":5638218}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-04T08:53:00.426322Z","iopub.execute_input":"2024-09-04T08:53:00.427528Z","iopub.status.idle":"2024-09-04T08:53:00.478108Z","shell.execute_reply.started":"2024-09-04T08:53:00.427478Z","shell.execute_reply":"2024-09-04T08:53:00.476915Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"/kaggle/input/flight-delays-dataset/flight_delays.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Step 1: Import Necessary Libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler ,OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split","metadata":{"execution":{"iopub.status.busy":"2024-09-04T08:53:00.480168Z","iopub.execute_input":"2024-09-04T08:53:00.480555Z","iopub.status.idle":"2024-09-04T08:53:00.486706Z","shell.execute_reply.started":"2024-09-04T08:53:00.480515Z","shell.execute_reply":"2024-09-04T08:53:00.485311Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"markdown","source":"# Step 2: Load the Dataset","metadata":{}},{"cell_type":"code","source":"data = pd.read_csv(\"/kaggle/input/flight-delays-dataset/flight_delays.csv\")\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-04T08:53:00.488232Z","iopub.execute_input":"2024-09-04T08:53:00.488709Z","iopub.status.idle":"2024-09-04T08:53:07.684624Z","shell.execute_reply.started":"2024-09-04T08:53:00.488659Z","shell.execute_reply":"2024-09-04T08:53:07.683470Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"   FlightID    Airline  FlightNumber Origin Destination ScheduledDeparture  \\\n0         1     United          4558    ORD         MIA   2024-09-01 08:11   \n1         2      Delta          8021    LAX         MIA   2024-09-01 10:25   \n2         3  Southwest          7520    DFW         SFO   2024-09-01 16:53   \n3         4      Delta          2046    ORD         BOS   2024-09-01 14:44   \n4         5      Delta          6049    LAX         SEA   2024-09-01 01:51   \n\n    ActualDeparture  ScheduledArrival     ActualArrival  DelayMinutes  \\\n0  2024-09-01 08:30  2024-09-01 12:11  2024-09-01 12:19             8   \n1  2024-09-01 10:41  2024-09-01 13:25  2024-09-01 13:27             2   \n2  2024-09-01 17:05  2024-09-01 17:53  2024-09-01 18:07            14   \n3  2024-09-01 15:04  2024-09-01 18:44  2024-09-01 18:34           -10   \n4  2024-09-01 02:08  2024-09-01 05:51  2024-09-01 06:15            24   \n\n           DelayReason  Cancelled  Diverted AircraftType TailNumber  Distance  \n0              Weather       True     False   Boeing 737     N71066      1031  \n1  Air Traffic Control       True      True  Airbus A320     N22657      1006  \n2              Weather       True      True   Boeing 737     N95611      2980  \n3                  NaN      False     False   Boeing 777     N90029      1408  \n4  Air Traffic Control      False      True   Boeing 737     N27417      2298  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>FlightID</th>\n      <th>Airline</th>\n      <th>FlightNumber</th>\n      <th>Origin</th>\n      <th>Destination</th>\n      <th>ScheduledDeparture</th>\n      <th>ActualDeparture</th>\n      <th>ScheduledArrival</th>\n      <th>ActualArrival</th>\n      <th>DelayMinutes</th>\n      <th>DelayReason</th>\n      <th>Cancelled</th>\n      <th>Diverted</th>\n      <th>AircraftType</th>\n      <th>TailNumber</th>\n      <th>Distance</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>United</td>\n      <td>4558</td>\n      <td>ORD</td>\n      <td>MIA</td>\n      <td>2024-09-01 08:11</td>\n      <td>2024-09-01 08:30</td>\n      <td>2024-09-01 12:11</td>\n      <td>2024-09-01 12:19</td>\n      <td>8</td>\n      <td>Weather</td>\n      <td>True</td>\n      <td>False</td>\n      <td>Boeing 737</td>\n      <td>N71066</td>\n      <td>1031</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Delta</td>\n      <td>8021</td>\n      <td>LAX</td>\n      <td>MIA</td>\n      <td>2024-09-01 10:25</td>\n      <td>2024-09-01 10:41</td>\n      <td>2024-09-01 13:25</td>\n      <td>2024-09-01 13:27</td>\n      <td>2</td>\n      <td>Air Traffic Control</td>\n      <td>True</td>\n      <td>True</td>\n      <td>Airbus A320</td>\n      <td>N22657</td>\n      <td>1006</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Southwest</td>\n      <td>7520</td>\n      <td>DFW</td>\n      <td>SFO</td>\n      <td>2024-09-01 16:53</td>\n      <td>2024-09-01 17:05</td>\n      <td>2024-09-01 17:53</td>\n      <td>2024-09-01 18:07</td>\n      <td>14</td>\n      <td>Weather</td>\n      <td>True</td>\n      <td>True</td>\n      <td>Boeing 737</td>\n      <td>N95611</td>\n      <td>2980</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Delta</td>\n      <td>2046</td>\n      <td>ORD</td>\n      <td>BOS</td>\n      <td>2024-09-01 14:44</td>\n      <td>2024-09-01 15:04</td>\n      <td>2024-09-01 18:44</td>\n      <td>2024-09-01 18:34</td>\n      <td>-10</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>Boeing 777</td>\n      <td>N90029</td>\n      <td>1408</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Delta</td>\n      <td>6049</td>\n      <td>LAX</td>\n      <td>SEA</td>\n      <td>2024-09-01 01:51</td>\n      <td>2024-09-01 02:08</td>\n      <td>2024-09-01 05:51</td>\n      <td>2024-09-01 06:15</td>\n      <td>24</td>\n      <td>Air Traffic Control</td>\n      <td>False</td>\n      <td>True</td>\n      <td>Boeing 737</td>\n      <td>N27417</td>\n      <td>2298</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Step 3: Basic Information","metadata":{}},{"cell_type":"code","source":"def summarize_data(file_path):\n    \"\"\"\n    Loads a dataset from a given file path and prints summary information, \n    statistics, data types, and missing values for the DataFrame.\n    \n    Parameters:\n    file_path (str): The path to the CSV file containing the dataset.\n    \"\"\"\n    # Load the dataset\n    df = pd.read_csv(file_path)\n    \n    # Print DataFrame info\n    print(\"DataFrame Information:\\n\")\n    df.info()  # No need for print() as df.info() already outputs the information\n    \n    # Print summary statistics\n    print(\"\\nSummary Statistics:\\n\")\n    print(df.describe(include='all'))  # 'include=all' to get statistics for all columns, including categorical\n    \n    # Print data types of each column\n    print(\"\\nData Types:\\n\")\n    print(df.dtypes)\n    \n    # Check for missing values\n    print(\"\\nMissing Values:\\n\")\n    print(df.isnull().sum())\n\n# Example usage\nsummarize_data(\"/kaggle/input/flight-delays-dataset/flight_delays.csv\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-04T08:53:07.687721Z","iopub.execute_input":"2024-09-04T08:53:07.688097Z","iopub.status.idle":"2024-09-04T08:53:22.299554Z","shell.execute_reply.started":"2024-09-04T08:53:07.688056Z","shell.execute_reply":"2024-09-04T08:53:22.298259Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"DataFrame Information:\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1747627 entries, 0 to 1747626\nData columns (total 16 columns):\n #   Column              Dtype \n---  ------              ----- \n 0   FlightID            int64 \n 1   Airline             object\n 2   FlightNumber        int64 \n 3   Origin              object\n 4   Destination         object\n 5   ScheduledDeparture  object\n 6   ActualDeparture     object\n 7   ScheduledArrival    object\n 8   ActualArrival       object\n 9   DelayMinutes        int64 \n 10  DelayReason         object\n 11  Cancelled           bool  \n 12  Diverted            bool  \n 13  AircraftType        object\n 14  TailNumber          object\n 15  Distance            int64 \ndtypes: bool(2), int64(4), object(10)\nmemory usage: 190.0+ MB\n\nSummary Statistics:\n\n            FlightID    Airline  FlightNumber   Origin Destination  \\\ncount   1.747627e+06    1747627  1.747627e+06  1747627     1747627   \nunique           NaN          4           NaN        5           5   \ntop              NaN  Southwest           NaN      ORD         MIA   \nfreq             NaN     437721           NaN   350059      350443   \nmean    8.738140e+05        NaN  5.001158e+03      NaN         NaN   \nstd     5.044966e+05        NaN  2.885822e+03      NaN         NaN   \nmin     1.000000e+00        NaN  1.000000e+00      NaN         NaN   \n25%     4.369075e+05        NaN  2.503000e+03      NaN         NaN   \n50%     8.738140e+05        NaN  5.002000e+03      NaN         NaN   \n75%     1.310720e+06        NaN  7.499000e+03      NaN         NaN   \nmax     1.747627e+06        NaN  9.999000e+03      NaN         NaN   \n\n       ScheduledDeparture   ActualDeparture  ScheduledArrival  \\\ncount             1747627           1747627           1747627   \nunique               1440              1470              1740   \ntop      2024-09-01 01:25  2024-09-01 13:59  2024-09-01 06:08   \nfreq                 1307              1332              1331   \nmean                  NaN               NaN               NaN   \nstd                   NaN               NaN               NaN   \nmin                   NaN               NaN               NaN   \n25%                   NaN               NaN               NaN   \n50%                   NaN               NaN               NaN   \n75%                   NaN               NaN               NaN   \nmax                   NaN               NaN               NaN   \n\n           ActualArrival  DelayMinutes          DelayReason Cancelled  \\\ncount            1747627  1.747627e+06              1278754   1747627   \nunique              1780           NaN                    3         2   \ntop     2024-09-01 21:33           NaN  Air Traffic Control     False   \nfreq                1321           NaN               426488    874434   \nmean                 NaN  9.999179e+00                  NaN       NaN   \nstd                  NaN  1.183112e+01                  NaN       NaN   \nmin                  NaN -1.000000e+01                  NaN       NaN   \n25%                  NaN  0.000000e+00                  NaN       NaN   \n50%                  NaN  1.000000e+01                  NaN       NaN   \n75%                  NaN  2.000000e+01                  NaN       NaN   \nmax                  NaN  3.000000e+01                  NaN       NaN   \n\n       Diverted AircraftType TailNumber      Distance  \ncount   1747627      1747627    1747627  1.747627e+06  \nunique        2            3      90000           NaN  \ntop       False  Airbus A320     N78834           NaN  \nfreq     874234       583445         40           NaN  \nmean        NaN          NaN        NaN  1.549936e+03  \nstd         NaN          NaN        NaN  8.368681e+02  \nmin         NaN          NaN        NaN  1.000000e+02  \n25%         NaN          NaN        NaN  8.250000e+02  \n50%         NaN          NaN        NaN  1.551000e+03  \n75%         NaN          NaN        NaN  2.274000e+03  \nmax         NaN          NaN        NaN  3.000000e+03  \n\nData Types:\n\nFlightID               int64\nAirline               object\nFlightNumber           int64\nOrigin                object\nDestination           object\nScheduledDeparture    object\nActualDeparture       object\nScheduledArrival      object\nActualArrival         object\nDelayMinutes           int64\nDelayReason           object\nCancelled               bool\nDiverted                bool\nAircraftType          object\nTailNumber            object\nDistance               int64\ndtype: object\n\nMissing Values:\n\nFlightID                   0\nAirline                    0\nFlightNumber               0\nOrigin                     0\nDestination                0\nScheduledDeparture         0\nActualDeparture            0\nScheduledArrival           0\nActualArrival              0\nDelayMinutes               0\nDelayReason           468873\nCancelled                  0\nDiverted                   0\nAircraftType               0\nTailNumber                 0\nDistance                   0\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Step 4: Identify and Separate Features","metadata":{}},{"cell_type":"code","source":"numeric_features = ['DelayMinutes', 'Distance']\ncategorical_features = ['Airline', 'Origin', 'Destination', 'DelayReason', 'AircraftType', 'Cancelled', 'Diverted']","metadata":{"execution":{"iopub.status.busy":"2024-09-04T08:53:22.300849Z","iopub.execute_input":"2024-09-04T08:53:22.301187Z","iopub.status.idle":"2024-09-04T08:53:22.306521Z","shell.execute_reply.started":"2024-09-04T08:53:22.301151Z","shell.execute_reply":"2024-09-04T08:53:22.305283Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"markdown","source":"# Step 5: Handle Missing Values","metadata":{}},{"cell_type":"code","source":"# Numeric data pipeline: Impute missing values and scale the data\nnumeric_transformer = Pipeline(steps=[\n    ('imputer',SimpleImputer(strategy='mean')),\n    ('scaler',StandardScaler())\n])","metadata":{"execution":{"iopub.status.busy":"2024-09-04T08:53:22.308173Z","iopub.execute_input":"2024-09-04T08:53:22.308616Z","iopub.status.idle":"2024-09-04T08:53:22.316612Z","shell.execute_reply.started":"2024-09-04T08:53:22.308563Z","shell.execute_reply":"2024-09-04T08:53:22.315546Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"# Categorical data pipeline: Impute missing values and encode categories\ncategorical_transformer = Pipeline(steps=[\n    ('imputer',SimpleImputer(strategy='most_frequent')),\n    ('onehot',OneHotEncoder(handle_unknown='ignore'))\n])","metadata":{"execution":{"iopub.status.busy":"2024-09-04T08:53:22.317835Z","iopub.execute_input":"2024-09-04T08:53:22.318172Z","iopub.status.idle":"2024-09-04T08:53:22.328193Z","shell.execute_reply.started":"2024-09-04T08:53:22.318136Z","shell.execute_reply":"2024-09-04T08:53:22.327198Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"markdown","source":"# Step 6: Combine Pipelines into a Column Transformer\n###### Use ColumnTransformer to apply different preprocessing steps to numeric and categorical features.","metadata":{}},{"cell_type":"code","source":"# Combine both pipelines\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num',numeric_transformer,numeric_features),\n        ('cat',categorical_transformer,categorical_features)\n        \n    ]\n)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-04T08:53:22.329492Z","iopub.execute_input":"2024-09-04T08:53:22.329870Z","iopub.status.idle":"2024-09-04T08:53:22.338387Z","shell.execute_reply.started":"2024-09-04T08:53:22.329813Z","shell.execute_reply":"2024-09-04T08:53:22.337359Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"markdown","source":"# Step 7: Prepare the Target Variable\n##### Determine the target variable (what we want to predict). In this case, we'll predict if a flight is delayed.","metadata":{}},{"cell_type":"code","source":"# Convert delay time into a binary target variable (True if delayed, False if not)\ny = data['DelayMinutes'] > 0","metadata":{"execution":{"iopub.status.busy":"2024-09-04T08:53:22.339842Z","iopub.execute_input":"2024-09-04T08:53:22.340182Z","iopub.status.idle":"2024-09-04T08:53:22.354298Z","shell.execute_reply.started":"2024-09-04T08:53:22.340146Z","shell.execute_reply":"2024-09-04T08:53:22.353133Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"markdown","source":"# Step 8: Drop Non-Relevant Features\n#### Remove columns that aren't needed for model training, like FlightID, FlightNumber, ScheduledDeparture, etc.","metadata":{}},{"cell_type":"code","source":"# Drop unnecessary columns\nX = data.drop(columns=['FlightID', 'FlightNumber', 'ScheduledDeparture', 'ActualDeparture', 'ScheduledArrival', 'ActualArrival', 'TailNumber', 'DelayMinutes'])","metadata":{"execution":{"iopub.status.busy":"2024-09-04T08:53:22.358311Z","iopub.execute_input":"2024-09-04T08:53:22.358739Z","iopub.status.idle":"2024-09-04T08:53:22.475822Z","shell.execute_reply.started":"2024-09-04T08:53:22.358701Z","shell.execute_reply":"2024-09-04T08:53:22.474843Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"markdown","source":"# Step 8: Split the Data into Training and Testing Sets\n#### Divide the data into training and testing sets for model evaluation.","metadata":{}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-09-04T08:53:22.477639Z","iopub.execute_input":"2024-09-04T08:53:22.478170Z","iopub.status.idle":"2024-09-04T08:53:23.560580Z","shell.execute_reply.started":"2024-09-04T08:53:22.478116Z","shell.execute_reply":"2024-09-04T08:53:23.559251Z"},"trusted":true},"execution_count":39,"outputs":[]}]}