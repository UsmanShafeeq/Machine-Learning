{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c2fb0394",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-04T08:55:36.379915Z",
     "iopub.status.busy": "2024-09-04T08:55:36.379445Z",
     "iopub.status.idle": "2024-09-04T08:55:36.873026Z",
     "shell.execute_reply": "2024-09-04T08:55:36.871309Z"
    },
    "papermill": {
     "duration": 0.505981,
     "end_time": "2024-09-04T08:55:36.875827",
     "exception": false,
     "start_time": "2024-09-04T08:55:36.369846",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/flight-delays-dataset/flight_delays.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39152b52",
   "metadata": {
    "papermill": {
     "duration": 0.006781,
     "end_time": "2024-09-04T08:55:36.889684",
     "exception": false,
     "start_time": "2024-09-04T08:55:36.882903",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 1: Import Necessary Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bb92be19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-04T08:55:36.905831Z",
     "iopub.status.busy": "2024-09-04T08:55:36.905126Z",
     "iopub.status.idle": "2024-09-04T08:55:38.844223Z",
     "shell.execute_reply": "2024-09-04T08:55:38.842966Z"
    },
    "papermill": {
     "duration": 1.95081,
     "end_time": "2024-09-04T08:55:38.847319",
     "exception": false,
     "start_time": "2024-09-04T08:55:36.896509",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import StandardScaler ,OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e4319f9",
   "metadata": {
    "papermill": {
     "duration": 0.006451,
     "end_time": "2024-09-04T08:55:38.860547",
     "exception": false,
     "start_time": "2024-09-04T08:55:38.854096",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 2: Load the Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e6e652b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-04T08:55:38.876686Z",
     "iopub.status.busy": "2024-09-04T08:55:38.876043Z",
     "iopub.status.idle": "2024-09-04T08:55:49.006127Z",
     "shell.execute_reply": "2024-09-04T08:55:49.004869Z"
    },
    "papermill": {
     "duration": 10.141005,
     "end_time": "2024-09-04T08:55:49.008814",
     "exception": false,
     "start_time": "2024-09-04T08:55:38.867809",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FlightID</th>\n",
       "      <th>Airline</th>\n",
       "      <th>FlightNumber</th>\n",
       "      <th>Origin</th>\n",
       "      <th>Destination</th>\n",
       "      <th>ScheduledDeparture</th>\n",
       "      <th>ActualDeparture</th>\n",
       "      <th>ScheduledArrival</th>\n",
       "      <th>ActualArrival</th>\n",
       "      <th>DelayMinutes</th>\n",
       "      <th>DelayReason</th>\n",
       "      <th>Cancelled</th>\n",
       "      <th>Diverted</th>\n",
       "      <th>AircraftType</th>\n",
       "      <th>TailNumber</th>\n",
       "      <th>Distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>United</td>\n",
       "      <td>4558</td>\n",
       "      <td>ORD</td>\n",
       "      <td>MIA</td>\n",
       "      <td>2024-09-01 08:11</td>\n",
       "      <td>2024-09-01 08:30</td>\n",
       "      <td>2024-09-01 12:11</td>\n",
       "      <td>2024-09-01 12:19</td>\n",
       "      <td>8</td>\n",
       "      <td>Weather</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>Boeing 737</td>\n",
       "      <td>N71066</td>\n",
       "      <td>1031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Delta</td>\n",
       "      <td>8021</td>\n",
       "      <td>LAX</td>\n",
       "      <td>MIA</td>\n",
       "      <td>2024-09-01 10:25</td>\n",
       "      <td>2024-09-01 10:41</td>\n",
       "      <td>2024-09-01 13:25</td>\n",
       "      <td>2024-09-01 13:27</td>\n",
       "      <td>2</td>\n",
       "      <td>Air Traffic Control</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>Airbus A320</td>\n",
       "      <td>N22657</td>\n",
       "      <td>1006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Southwest</td>\n",
       "      <td>7520</td>\n",
       "      <td>DFW</td>\n",
       "      <td>SFO</td>\n",
       "      <td>2024-09-01 16:53</td>\n",
       "      <td>2024-09-01 17:05</td>\n",
       "      <td>2024-09-01 17:53</td>\n",
       "      <td>2024-09-01 18:07</td>\n",
       "      <td>14</td>\n",
       "      <td>Weather</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>Boeing 737</td>\n",
       "      <td>N95611</td>\n",
       "      <td>2980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Delta</td>\n",
       "      <td>2046</td>\n",
       "      <td>ORD</td>\n",
       "      <td>BOS</td>\n",
       "      <td>2024-09-01 14:44</td>\n",
       "      <td>2024-09-01 15:04</td>\n",
       "      <td>2024-09-01 18:44</td>\n",
       "      <td>2024-09-01 18:34</td>\n",
       "      <td>-10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Boeing 777</td>\n",
       "      <td>N90029</td>\n",
       "      <td>1408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Delta</td>\n",
       "      <td>6049</td>\n",
       "      <td>LAX</td>\n",
       "      <td>SEA</td>\n",
       "      <td>2024-09-01 01:51</td>\n",
       "      <td>2024-09-01 02:08</td>\n",
       "      <td>2024-09-01 05:51</td>\n",
       "      <td>2024-09-01 06:15</td>\n",
       "      <td>24</td>\n",
       "      <td>Air Traffic Control</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>Boeing 737</td>\n",
       "      <td>N27417</td>\n",
       "      <td>2298</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   FlightID    Airline  FlightNumber Origin Destination ScheduledDeparture  \\\n",
       "0         1     United          4558    ORD         MIA   2024-09-01 08:11   \n",
       "1         2      Delta          8021    LAX         MIA   2024-09-01 10:25   \n",
       "2         3  Southwest          7520    DFW         SFO   2024-09-01 16:53   \n",
       "3         4      Delta          2046    ORD         BOS   2024-09-01 14:44   \n",
       "4         5      Delta          6049    LAX         SEA   2024-09-01 01:51   \n",
       "\n",
       "    ActualDeparture  ScheduledArrival     ActualArrival  DelayMinutes  \\\n",
       "0  2024-09-01 08:30  2024-09-01 12:11  2024-09-01 12:19             8   \n",
       "1  2024-09-01 10:41  2024-09-01 13:25  2024-09-01 13:27             2   \n",
       "2  2024-09-01 17:05  2024-09-01 17:53  2024-09-01 18:07            14   \n",
       "3  2024-09-01 15:04  2024-09-01 18:44  2024-09-01 18:34           -10   \n",
       "4  2024-09-01 02:08  2024-09-01 05:51  2024-09-01 06:15            24   \n",
       "\n",
       "           DelayReason  Cancelled  Diverted AircraftType TailNumber  Distance  \n",
       "0              Weather       True     False   Boeing 737     N71066      1031  \n",
       "1  Air Traffic Control       True      True  Airbus A320     N22657      1006  \n",
       "2              Weather       True      True   Boeing 737     N95611      2980  \n",
       "3                  NaN      False     False   Boeing 777     N90029      1408  \n",
       "4  Air Traffic Control      False      True   Boeing 737     N27417      2298  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv(\"/kaggle/input/flight-delays-dataset/flight_delays.csv\")\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ba23cae",
   "metadata": {
    "papermill": {
     "duration": 0.006849,
     "end_time": "2024-09-04T08:55:49.023018",
     "exception": false,
     "start_time": "2024-09-04T08:55:49.016169",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 3: Basic Information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "56298862",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-04T08:55:49.038911Z",
     "iopub.status.busy": "2024-09-04T08:55:49.038447Z",
     "iopub.status.idle": "2024-09-04T08:56:04.430552Z",
     "shell.execute_reply": "2024-09-04T08:56:04.428748Z"
    },
    "papermill": {
     "duration": 15.403424,
     "end_time": "2024-09-04T08:56:04.433317",
     "exception": false,
     "start_time": "2024-09-04T08:55:49.029893",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFrame Information:\n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1747627 entries, 0 to 1747626\n",
      "Data columns (total 16 columns):\n",
      " #   Column              Dtype \n",
      "---  ------              ----- \n",
      " 0   FlightID            int64 \n",
      " 1   Airline             object\n",
      " 2   FlightNumber        int64 \n",
      " 3   Origin              object\n",
      " 4   Destination         object\n",
      " 5   ScheduledDeparture  object\n",
      " 6   ActualDeparture     object\n",
      " 7   ScheduledArrival    object\n",
      " 8   ActualArrival       object\n",
      " 9   DelayMinutes        int64 \n",
      " 10  DelayReason         object\n",
      " 11  Cancelled           bool  \n",
      " 12  Diverted            bool  \n",
      " 13  AircraftType        object\n",
      " 14  TailNumber          object\n",
      " 15  Distance            int64 \n",
      "dtypes: bool(2), int64(4), object(10)\n",
      "memory usage: 190.0+ MB\n",
      "\n",
      "Summary Statistics:\n",
      "\n",
      "            FlightID    Airline  FlightNumber   Origin Destination  \\\n",
      "count   1.747627e+06    1747627  1.747627e+06  1747627     1747627   \n",
      "unique           NaN          4           NaN        5           5   \n",
      "top              NaN  Southwest           NaN      ORD         MIA   \n",
      "freq             NaN     437721           NaN   350059      350443   \n",
      "mean    8.738140e+05        NaN  5.001158e+03      NaN         NaN   \n",
      "std     5.044966e+05        NaN  2.885822e+03      NaN         NaN   \n",
      "min     1.000000e+00        NaN  1.000000e+00      NaN         NaN   \n",
      "25%     4.369075e+05        NaN  2.503000e+03      NaN         NaN   \n",
      "50%     8.738140e+05        NaN  5.002000e+03      NaN         NaN   \n",
      "75%     1.310720e+06        NaN  7.499000e+03      NaN         NaN   \n",
      "max     1.747627e+06        NaN  9.999000e+03      NaN         NaN   \n",
      "\n",
      "       ScheduledDeparture   ActualDeparture  ScheduledArrival  \\\n",
      "count             1747627           1747627           1747627   \n",
      "unique               1440              1470              1740   \n",
      "top      2024-09-01 01:25  2024-09-01 13:59  2024-09-01 06:08   \n",
      "freq                 1307              1332              1331   \n",
      "mean                  NaN               NaN               NaN   \n",
      "std                   NaN               NaN               NaN   \n",
      "min                   NaN               NaN               NaN   \n",
      "25%                   NaN               NaN               NaN   \n",
      "50%                   NaN               NaN               NaN   \n",
      "75%                   NaN               NaN               NaN   \n",
      "max                   NaN               NaN               NaN   \n",
      "\n",
      "           ActualArrival  DelayMinutes          DelayReason Cancelled  \\\n",
      "count            1747627  1.747627e+06              1278754   1747627   \n",
      "unique              1780           NaN                    3         2   \n",
      "top     2024-09-01 21:33           NaN  Air Traffic Control     False   \n",
      "freq                1321           NaN               426488    874434   \n",
      "mean                 NaN  9.999179e+00                  NaN       NaN   \n",
      "std                  NaN  1.183112e+01                  NaN       NaN   \n",
      "min                  NaN -1.000000e+01                  NaN       NaN   \n",
      "25%                  NaN  0.000000e+00                  NaN       NaN   \n",
      "50%                  NaN  1.000000e+01                  NaN       NaN   \n",
      "75%                  NaN  2.000000e+01                  NaN       NaN   \n",
      "max                  NaN  3.000000e+01                  NaN       NaN   \n",
      "\n",
      "       Diverted AircraftType TailNumber      Distance  \n",
      "count   1747627      1747627    1747627  1.747627e+06  \n",
      "unique        2            3      90000           NaN  \n",
      "top       False  Airbus A320     N78834           NaN  \n",
      "freq     874234       583445         40           NaN  \n",
      "mean        NaN          NaN        NaN  1.549936e+03  \n",
      "std         NaN          NaN        NaN  8.368681e+02  \n",
      "min         NaN          NaN        NaN  1.000000e+02  \n",
      "25%         NaN          NaN        NaN  8.250000e+02  \n",
      "50%         NaN          NaN        NaN  1.551000e+03  \n",
      "75%         NaN          NaN        NaN  2.274000e+03  \n",
      "max         NaN          NaN        NaN  3.000000e+03  \n",
      "\n",
      "Data Types:\n",
      "\n",
      "FlightID               int64\n",
      "Airline               object\n",
      "FlightNumber           int64\n",
      "Origin                object\n",
      "Destination           object\n",
      "ScheduledDeparture    object\n",
      "ActualDeparture       object\n",
      "ScheduledArrival      object\n",
      "ActualArrival         object\n",
      "DelayMinutes           int64\n",
      "DelayReason           object\n",
      "Cancelled               bool\n",
      "Diverted                bool\n",
      "AircraftType          object\n",
      "TailNumber            object\n",
      "Distance               int64\n",
      "dtype: object\n",
      "\n",
      "Missing Values:\n",
      "\n",
      "FlightID                   0\n",
      "Airline                    0\n",
      "FlightNumber               0\n",
      "Origin                     0\n",
      "Destination                0\n",
      "ScheduledDeparture         0\n",
      "ActualDeparture            0\n",
      "ScheduledArrival           0\n",
      "ActualArrival              0\n",
      "DelayMinutes               0\n",
      "DelayReason           468873\n",
      "Cancelled                  0\n",
      "Diverted                   0\n",
      "AircraftType               0\n",
      "TailNumber                 0\n",
      "Distance                   0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "def summarize_data(file_path):\n",
    "    \"\"\"\n",
    "    Loads a dataset from a given file path and prints summary information, \n",
    "    statistics, data types, and missing values for the DataFrame.\n",
    "    \n",
    "    Parameters:\n",
    "    file_path (str): The path to the CSV file containing the dataset.\n",
    "    \"\"\"\n",
    "    # Load the dataset\n",
    "    df = pd.read_csv(file_path)\n",
    "    \n",
    "    # Print DataFrame info\n",
    "    print(\"DataFrame Information:\\n\")\n",
    "    df.info()  # No need for print() as df.info() already outputs the information\n",
    "    \n",
    "    # Print summary statistics\n",
    "    print(\"\\nSummary Statistics:\\n\")\n",
    "    print(df.describe(include='all'))  # 'include=all' to get statistics for all columns, including categorical\n",
    "    \n",
    "    # Print data types of each column\n",
    "    print(\"\\nData Types:\\n\")\n",
    "    print(df.dtypes)\n",
    "    \n",
    "    # Check for missing values\n",
    "    print(\"\\nMissing Values:\\n\")\n",
    "    print(df.isnull().sum())\n",
    "\n",
    "# Example usage\n",
    "summarize_data(\"/kaggle/input/flight-delays-dataset/flight_delays.csv\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c1c9583",
   "metadata": {
    "papermill": {
     "duration": 0.007263,
     "end_time": "2024-09-04T08:56:04.448416",
     "exception": false,
     "start_time": "2024-09-04T08:56:04.441153",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 4: Identify and Separate Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ac3bdec3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-04T08:56:04.465402Z",
     "iopub.status.busy": "2024-09-04T08:56:04.464974Z",
     "iopub.status.idle": "2024-09-04T08:56:04.471638Z",
     "shell.execute_reply": "2024-09-04T08:56:04.470086Z"
    },
    "papermill": {
     "duration": 0.018459,
     "end_time": "2024-09-04T08:56:04.474379",
     "exception": false,
     "start_time": "2024-09-04T08:56:04.455920",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "numeric_features = ['DelayMinutes', 'Distance']\n",
    "categorical_features = ['Airline', 'Origin', 'Destination', 'DelayReason', 'AircraftType', 'Cancelled', 'Diverted']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9986d1b",
   "metadata": {
    "papermill": {
     "duration": 0.007248,
     "end_time": "2024-09-04T08:56:04.489303",
     "exception": false,
     "start_time": "2024-09-04T08:56:04.482055",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 5: Handle Missing Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1b53e981",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-04T08:56:04.506033Z",
     "iopub.status.busy": "2024-09-04T08:56:04.505590Z",
     "iopub.status.idle": "2024-09-04T08:56:04.512059Z",
     "shell.execute_reply": "2024-09-04T08:56:04.510700Z"
    },
    "papermill": {
     "duration": 0.017867,
     "end_time": "2024-09-04T08:56:04.514641",
     "exception": false,
     "start_time": "2024-09-04T08:56:04.496774",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Numeric data pipeline: Impute missing values and scale the data\n",
    "numeric_transformer = Pipeline(steps=[\n",
    "    ('imputer',SimpleImputer(strategy='mean')),\n",
    "    ('scaler',StandardScaler())\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8d0359e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-04T08:56:04.531383Z",
     "iopub.status.busy": "2024-09-04T08:56:04.530951Z",
     "iopub.status.idle": "2024-09-04T08:56:04.536959Z",
     "shell.execute_reply": "2024-09-04T08:56:04.535747Z"
    },
    "papermill": {
     "duration": 0.017322,
     "end_time": "2024-09-04T08:56:04.539381",
     "exception": false,
     "start_time": "2024-09-04T08:56:04.522059",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Categorical data pipeline: Impute missing values and encode categories\n",
    "categorical_transformer = Pipeline(steps=[\n",
    "    ('imputer',SimpleImputer(strategy='most_frequent')),\n",
    "    ('onehot',OneHotEncoder(handle_unknown='ignore'))\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7eed130f",
   "metadata": {
    "papermill": {
     "duration": 0.007065,
     "end_time": "2024-09-04T08:56:04.553984",
     "exception": false,
     "start_time": "2024-09-04T08:56:04.546919",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 6: Combine Pipelines into a Column Transformer\n",
    "###### Use ColumnTransformer to apply different preprocessing steps to numeric and categorical features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "911d27df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-04T08:56:04.570696Z",
     "iopub.status.busy": "2024-09-04T08:56:04.570208Z",
     "iopub.status.idle": "2024-09-04T08:56:04.576108Z",
     "shell.execute_reply": "2024-09-04T08:56:04.574750Z"
    },
    "papermill": {
     "duration": 0.017495,
     "end_time": "2024-09-04T08:56:04.578837",
     "exception": false,
     "start_time": "2024-09-04T08:56:04.561342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Combine both pipelines\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num',numeric_transformer,numeric_features),\n",
    "        ('cat',categorical_transformer,categorical_features)\n",
    "        \n",
    "    ]\n",
    ")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fea15c1d",
   "metadata": {
    "papermill": {
     "duration": 0.00717,
     "end_time": "2024-09-04T08:56:04.593480",
     "exception": false,
     "start_time": "2024-09-04T08:56:04.586310",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 7: Prepare the Target Variable\n",
    "##### Determine the target variable (what we want to predict). In this case, we'll predict if a flight is delayed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "565e1993",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-04T08:56:04.610039Z",
     "iopub.status.busy": "2024-09-04T08:56:04.609564Z",
     "iopub.status.idle": "2024-09-04T08:56:04.616732Z",
     "shell.execute_reply": "2024-09-04T08:56:04.615580Z"
    },
    "papermill": {
     "duration": 0.018428,
     "end_time": "2024-09-04T08:56:04.619247",
     "exception": false,
     "start_time": "2024-09-04T08:56:04.600819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Convert delay time into a binary target variable (True if delayed, False if not)\n",
    "y = data['DelayMinutes'] > 0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69043f56",
   "metadata": {
    "papermill": {
     "duration": 0.006992,
     "end_time": "2024-09-04T08:56:04.633584",
     "exception": false,
     "start_time": "2024-09-04T08:56:04.626592",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 8: Drop Non-Relevant Features\n",
    "#### Remove columns that aren't needed for model training, like FlightID, FlightNumber, ScheduledDeparture, etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "75b0d33f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-04T08:56:04.650254Z",
     "iopub.status.busy": "2024-09-04T08:56:04.649850Z",
     "iopub.status.idle": "2024-09-04T08:56:04.734808Z",
     "shell.execute_reply": "2024-09-04T08:56:04.733715Z"
    },
    "papermill": {
     "duration": 0.096737,
     "end_time": "2024-09-04T08:56:04.737570",
     "exception": false,
     "start_time": "2024-09-04T08:56:04.640833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Drop unnecessary columns\n",
    "X = data.drop(columns=['FlightID', 'FlightNumber', 'ScheduledDeparture', 'ActualDeparture', 'ScheduledArrival', 'ActualArrival', 'TailNumber', 'DelayMinutes'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62fee742",
   "metadata": {
    "papermill": {
     "duration": 0.006985,
     "end_time": "2024-09-04T08:56:04.751946",
     "exception": false,
     "start_time": "2024-09-04T08:56:04.744961",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 8: Split the Data into Training and Testing Sets\n",
    "#### Divide the data into training and testing sets for model evaluation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "13437f1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-04T08:56:04.768231Z",
     "iopub.status.busy": "2024-09-04T08:56:04.767826Z",
     "iopub.status.idle": "2024-09-04T08:56:05.919473Z",
     "shell.execute_reply": "2024-09-04T08:56:05.918221Z"
    },
    "papermill": {
     "duration": 1.163169,
     "end_time": "2024-09-04T08:56:05.922351",
     "exception": false,
     "start_time": "2024-09-04T08:56:04.759182",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5638218,
     "sourceId": 9309992,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 33.787551,
   "end_time": "2024-09-04T08:56:06.854528",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-04T08:55:33.066977",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
