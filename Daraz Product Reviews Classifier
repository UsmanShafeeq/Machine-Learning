{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6632467,"sourceType":"datasetVersion","datasetId":3828869}],"dockerImageVersionId":30558,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Daraz Product Reviews ","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import SGDClassifier, LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import classification_report, accuracy_score\nimport numpy as np\nfrom tabulate import tabulate","metadata":{"execution":{"iopub.status.busy":"2024-07-08T08:34:30.334479Z","iopub.execute_input":"2024-07-08T08:34:30.334817Z","iopub.status.idle":"2024-07-08T08:34:30.341507Z","shell.execute_reply.started":"2024-07-08T08:34:30.334788Z","shell.execute_reply":"2024-07-08T08:34:30.340188Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\ndf = pd.read_csv('/kaggle/input/daraz-code-mixed-product-reviews/daraz-code-mixed-product-reviews.csv')\ndf","metadata":{"execution":{"iopub.status.busy":"2024-07-08T08:34:30.344393Z","iopub.execute_input":"2024-07-08T08:34:30.344803Z","iopub.status.idle":"2024-07-08T08:34:30.407625Z","shell.execute_reply.started":"2024-07-08T08:34:30.344767Z","shell.execute_reply":"2024-07-08T08:34:30.406166Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"      Sentiments                                            Reviews\n0       negative  Stuff and design was totally changed. cheap qu...\n1       positive  i got my parxel before time,sorry for late rev...\n2       positive  So far so good..... Bought it only because it ...\n3        neutral  Received as described but not suitable such ha...\n4       positive  Received on time and in a safely packed box. T...\n...          ...                                                ...\n16985   negative  It is doing nothing. I have wasted my money an...\n16986   positive  Bht he achi prdct h Jo cheez dekhi whi mili ma...\n16987    neutral  product quality is not very good but working o...\n16988   positive  Very soft and cozy product perfect travel part...\n16989   positive  Original product hai because original kay mic ...\n\n[16990 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sentiments</th>\n      <th>Reviews</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>negative</td>\n      <td>Stuff and design was totally changed. cheap qu...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>positive</td>\n      <td>i got my parxel before time,sorry for late rev...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>positive</td>\n      <td>So far so good..... Bought it only because it ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>neutral</td>\n      <td>Received as described but not suitable such ha...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>positive</td>\n      <td>Received on time and in a safely packed box. T...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>16985</th>\n      <td>negative</td>\n      <td>It is doing nothing. I have wasted my money an...</td>\n    </tr>\n    <tr>\n      <th>16986</th>\n      <td>positive</td>\n      <td>Bht he achi prdct h Jo cheez dekhi whi mili ma...</td>\n    </tr>\n    <tr>\n      <th>16987</th>\n      <td>neutral</td>\n      <td>product quality is not very good but working o...</td>\n    </tr>\n    <tr>\n      <th>16988</th>\n      <td>positive</td>\n      <td>Very soft and cozy product perfect travel part...</td>\n    </tr>\n    <tr>\n      <th>16989</th>\n      <td>positive</td>\n      <td>Original product hai because original kay mic ...</td>\n    </tr>\n  </tbody>\n</table>\n<p>16990 rows Ã— 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Display basic information about the dataset\nprint(df.info())","metadata":{"execution":{"iopub.status.busy":"2024-07-08T08:34:30.409118Z","iopub.execute_input":"2024-07-08T08:34:30.409464Z","iopub.status.idle":"2024-07-08T08:34:30.427559Z","shell.execute_reply.started":"2024-07-08T08:34:30.409434Z","shell.execute_reply":"2024-07-08T08:34:30.426084Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 16990 entries, 0 to 16989\nData columns (total 2 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   Sentiments  16990 non-null  object\n 1   Reviews     16990 non-null  object\ndtypes: object(2)\nmemory usage: 265.6+ KB\nNone\n","output_type":"stream"}]},{"cell_type":"code","source":"# Summary statistics\nprint(df.describe())","metadata":{"execution":{"iopub.status.busy":"2024-07-08T08:34:30.428976Z","iopub.execute_input":"2024-07-08T08:34:30.429381Z","iopub.status.idle":"2024-07-08T08:34:30.466268Z","shell.execute_reply.started":"2024-07-08T08:34:30.429338Z","shell.execute_reply":"2024-07-08T08:34:30.464500Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"       Sentiments                                            Reviews\ncount       16990                                              16990\nunique          3                                              16990\ntop      positive  Stuff and design was totally changed. cheap qu...\nfreq        10167                                                  1\n","output_type":"stream"}]},{"cell_type":"code","source":"# Check for missing values\nprint(df.isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-07-08T08:34:30.467919Z","iopub.execute_input":"2024-07-08T08:34:30.468304Z","iopub.status.idle":"2024-07-08T08:34:30.480685Z","shell.execute_reply.started":"2024-07-08T08:34:30.468271Z","shell.execute_reply":"2024-07-08T08:34:30.479344Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"Sentiments    0\nReviews       0\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Splitting Data","metadata":{}},{"cell_type":"code","source":"X = df['Reviews']\ny = df['Sentiments']","metadata":{"execution":{"iopub.status.busy":"2024-07-08T08:34:30.482546Z","iopub.execute_input":"2024-07-08T08:34:30.483052Z","iopub.status.idle":"2024-07-08T08:34:30.498141Z","shell.execute_reply.started":"2024-07-08T08:34:30.483007Z","shell.execute_reply":"2024-07-08T08:34:30.496803Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"markdown","source":"Splitting the dataset into training (80%) and testing (20%) sets","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import StratifiedShuffleSplit\n\nsss = StratifiedShuffleSplit(n_splits=3, test_size=0.2, random_state=42)\n\nfor train_index, test_index in sss.split(X, y):\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y.iloc[train_index], y.iloc[test_index]","metadata":{"execution":{"iopub.status.busy":"2024-07-08T08:34:30.499728Z","iopub.execute_input":"2024-07-08T08:34:30.500170Z","iopub.status.idle":"2024-07-08T08:34:30.566311Z","shell.execute_reply.started":"2024-07-08T08:34:30.500134Z","shell.execute_reply":"2024-07-08T08:34:30.564819Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"markdown","source":"## Feature Extraction","metadata":{}},{"cell_type":"code","source":"from sklearn.feature_extraction.text import CountVectorizer\n\nvectorizer = CountVectorizer(binary=True)\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-08T08:34:30.570427Z","iopub.execute_input":"2024-07-08T08:34:30.570952Z","iopub.status.idle":"2024-07-08T08:34:31.007668Z","shell.execute_reply.started":"2024-07-08T08:34:30.570901Z","shell.execute_reply":"2024-07-08T08:34:31.006327Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"markdown","source":"## Training Model","metadata":{}},{"cell_type":"markdown","source":"Stochastic Gradient Descent Classifier","metadata":{}},{"cell_type":"code","source":"# Define the classifiers\nclassifiers = {\n    'SGD Classifier': SGDClassifier(max_iter=1000, tol=1e-3, random_state=42),\n    'Logistic Regression': LogisticRegression(max_iter=1000, random_state=42),\n    'Decision Tree': DecisionTreeClassifier(random_state=42),\n    'Random Forest': RandomForestClassifier(n_estimators=100, random_state=42),\n    'K-Nearest Neighbors': KNeighborsClassifier(),\n    'Support Vector Machine': SVC(kernel='linear', random_state=42)\n}","metadata":{"execution":{"iopub.status.busy":"2024-07-08T08:34:31.009278Z","iopub.execute_input":"2024-07-08T08:34:31.009642Z","iopub.status.idle":"2024-07-08T08:34:31.017640Z","shell.execute_reply.started":"2024-07-08T08:34:31.009612Z","shell.execute_reply":"2024-07-08T08:34:31.016402Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"# Dictionary to store classification reports\nreports = {}\n\n# Train and evaluate each classifier using cross-validation\nfor name, clf in classifiers.items():\n    y_pred_cv = cross_val_predict(clf, X_train, y_train, cv=3)\n    clf.fit(X_train, y_train)\n    accuracy = accuracy_score(y_train, y_pred_cv) * 100  # Convert to percentage\n    report = classification_report(y_train, y_pred_cv, output_dict=True)\n    \n    # Store the report\n    reports[name] = report\n\n    # Convert classification report to pandas DataFrame\n    report_df = pd.DataFrame(report).transpose()\n    \n    # Convert metrics to percentages and round off to 2 decimal places\n    report_df[['precision', 'recall', 'f1-score', 'support']] = report_df[['precision', 'recall', 'f1-score', 'support']].apply(lambda x: round(x * 100, 2) if x.name != 'support' else x)\n    \n    # Print classification report in a more readable format using tabulate\n    print(f\"\\n{name} Classification Report:\")\n    print(tabulate(report_df, headers='keys', tablefmt='pretty'))\n\n# Example of accessing a specific metric from the reports dictionary\nsummary_data = []\n\nfor name, report in reports.items():\n    accuracy = report['accuracy'] * 100  # Convert to percentage\n    macro_avg_f1 = report['macro avg']['f1-score'] * 100  # Convert to percentage\n    weighted_avg_f1 = report['weighted avg']['f1-score'] * 100  # Convert to percentage\n    \n    summary_data.append([name, round(accuracy, 2), round(macro_avg_f1, 2), round(weighted_avg_f1, 2)])\n\n# Convert summary data to DataFrame for better display\nsummary_df = pd.DataFrame(summary_data, columns=['Classifier', 'Accuracy (%)', 'Macro Avg F1-Score (%)', 'Weighted Avg F1-Score (%)'])\n\nprint(\"\\nSummary Metrics:\")\nprint(tabulate(summary_df, headers='keys', tablefmt='pretty'))","metadata":{"execution":{"iopub.status.busy":"2024-07-08T08:38:00.028473Z","iopub.execute_input":"2024-07-08T08:38:00.029018Z","iopub.status.idle":"2024-07-08T08:40:27.404272Z","shell.execute_reply.started":"2024-07-08T08:38:00.028979Z","shell.execute_reply":"2024-07-08T08:40:27.402764Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"\nSGD Classifier Classification Report:\n+--------------+-----------+--------+----------+--------------------+\n|              | precision | recall | f1-score |      support       |\n+--------------+-----------+--------+----------+--------------------+\n|   negative   |   83.38   | 84.07  |  83.72   |       3490.0       |\n|   neutral    |   70.7    | 60.54  |  65.23   |       1969.0       |\n|   positive   |   91.64   |  94.5  |  93.05   |       8133.0       |\n|   accuracy   |   86.9    |  86.9  |   86.9   | 0.8690406121247792 |\n|  macro avg   |   81.91   |  79.7  |  80.67   |      13592.0       |\n| weighted avg |   86.49   |  86.9  |  86.62   |      13592.0       |\n+--------------+-----------+--------+----------+--------------------+\n\nLogistic Regression Classification Report:\n+--------------+-----------+--------+----------+--------------------+\n|              | precision | recall | f1-score |      support       |\n+--------------+-----------+--------+----------+--------------------+\n|   negative   |   84.81   | 83.81  |  84.31   |       3490.0       |\n|   neutral    |   70.72   |  61.1  |  65.56   |       1969.0       |\n|   positive   |   91.44   | 94.91  |  93.14   |       8133.0       |\n|   accuracy   |   87.16   | 87.16  |  87.16   | 0.8716156562683932 |\n|  macro avg   |   82.32   | 79.94  |   81.0   |      13592.0       |\n| weighted avg |   86.73   | 87.16  |  86.88   |      13592.0       |\n+--------------+-----------+--------+----------+--------------------+\n\nDecision Tree Classification Report:\n+--------------+-----------+--------+----------+--------------------+\n|              | precision | recall | f1-score |      support       |\n+--------------+-----------+--------+----------+--------------------+\n|   negative   |   75.81   | 78.91  |  77.33   |       3490.0       |\n|   neutral    |   57.24   | 56.02  |  56.62   |       1969.0       |\n|   positive   |   90.03   | 88.91  |  89.46   |       8133.0       |\n|   accuracy   |   81.58   | 81.58  |  81.58   | 0.8157739846968806 |\n|  macro avg   |   74.36   | 74.61  |  74.47   |      13592.0       |\n| weighted avg |   81.63   | 81.58  |  81.59   |      13592.0       |\n+--------------+-----------+--------+----------+--------------------+\n\nRandom Forest Classification Report:\n+--------------+-----------+--------+----------+--------------------+\n|              | precision | recall | f1-score |      support       |\n+--------------+-----------+--------+----------+--------------------+\n|   negative   |   81.65   | 85.42  |  83.49   |       3490.0       |\n|   neutral    |   74.15   | 50.99  |  60.43   |       1969.0       |\n|   positive   |   89.72   | 94.73  |  92.15   |       8133.0       |\n|   accuracy   |   86.0    |  86.0  |   86.0   | 0.8599911712772219 |\n|  macro avg   |   81.84   | 77.04  |  78.69   |      13592.0       |\n| weighted avg |   85.39   |  86.0  |  85.33   |      13592.0       |\n+--------------+-----------+--------+----------+--------------------+\n\nK-Nearest Neighbors Classification Report:\n+--------------+-----------+--------+----------+-------------------+\n|              | precision | recall | f1-score |      support      |\n+--------------+-----------+--------+----------+-------------------+\n|   negative   |   73.55   | 66.62  |  69.91   |      3490.0       |\n|   neutral    |   58.84   | 17.06  |  26.46   |      1969.0       |\n|   positive   |   77.3    | 93.72  |  84.72   |      8133.0       |\n|   accuracy   |   75.65   | 75.65  |  75.65   | 0.756547969393761 |\n|  macro avg   |   69.9    | 59.13  |  60.36   |      13592.0      |\n| weighted avg |   73.67   | 75.65  |  72.48   |      13592.0      |\n+--------------+-----------+--------+----------+-------------------+\n\nSupport Vector Machine Classification Report:\n+--------------+-----------+--------+----------+--------------------+\n|              | precision | recall | f1-score |      support       |\n+--------------+-----------+--------+----------+--------------------+\n|   negative   |   83.37   | 83.87  |  83.62   |       3490.0       |\n|   neutral    |   68.14   | 60.94  |  64.34   |       1969.0       |\n|   positive   |   91.92   | 94.04  |  92.97   |       8133.0       |\n|   accuracy   |   86.63   | 86.63  |  86.63   | 0.8663184226015304 |\n|  macro avg   |   81.14   | 79.62  |  80.31   |      13592.0       |\n| weighted avg |   86.28   | 86.63  |  86.42   |      13592.0       |\n+--------------+-----------+--------+----------+--------------------+\n\nSummary Metrics:\n+---+------------------------+--------------+------------------------+---------------------------+\n|   |       Classifier       | Accuracy (%) | Macro Avg F1-Score (%) | Weighted Avg F1-Score (%) |\n+---+------------------------+--------------+------------------------+---------------------------+\n| 0 |     SGD Classifier     |     86.9     |         80.67          |           86.62           |\n| 1 |  Logistic Regression   |    87.16     |          81.0          |           86.88           |\n| 2 |     Decision Tree      |    81.58     |         74.47          |           81.59           |\n| 3 |     Random Forest      |     86.0     |         78.69          |           85.33           |\n| 4 |  K-Nearest Neighbors   |    75.65     |         60.36          |           72.48           |\n| 5 | Support Vector Machine |    86.63     |         80.31          |           86.42           |\n+---+------------------------+--------------+------------------------+---------------------------+\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}